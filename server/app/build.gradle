/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

plugins {
    id 'com.adarshr.test-logger' version '4.0.0'
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'cz.habarta.typescript-generator' version '3.2.1263'
}

generateTypeScript {
    jsonLibrary = 'gson'
    classes = [
        'io.smartin.id1212.net.dto.Action',
        'io.smartin.id1212.net.dto.GameCreation',
        'io.smartin.id1212.net.dto.JoinRequest',
        'io.smartin.id1212.net.dto.LeaveRequest',
        'io.smartin.id1212.net.dto.Message',
        'io.smartin.id1212.net.dto.RejoinRequest',
        'io.smartin.id1212.net.dto.Snapshot',
    ]
    outputKind = 'module'
    outputFile = file('../../client/src/server-types.d.ts')
    includePropertyAnnotations = ['com.google.gson.annotations.Expose']
}

java {
    sourceCompatibility = 21
    targetCompatibility = 21
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation 'org.apache.tomcat.embed:tomcat-embed-websocket:9.0.97'
    testImplementation 'org.testng:testng:7.10.2'
    testImplementation 'junit:junit:4.13.2'
    compileOnly 'com.heroku:webapp-runner:9.0.97.0'
    implementation 'com.aventrix.jnanoid:jnanoid:2.0.0'
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'com.google.guava:guava:33.3.1-jre'
    implementation 'javax.websocket:javax.websocket-api:1.1'
    implementation 'org.apache.logging.log4j:log4j-api:2.24.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.24.1'
    implementation 'org.junit.jupiter:junit-jupiter:5.11.3'
    implementation 'org.mockito:mockito-core:5.14.2'

    testImplementation 'org.apache.tomcat.embed:tomcat-embed-core:9.0.97'
    testImplementation 'org.apache.tomcat.embed:tomcat-embed-websocket:9.0.97'
    testImplementation 'org.apache.tomcat.embed:tomcat-embed-jasper:9.0.97'

    testImplementation 'com.typesafe.akka:akka-testkit_3:2.9.0-M2'
    testImplementation 'com.typesafe.akka:akka-actor_3:2.9.0-M2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.3'
}

application {
    // Define the main class for the application.
    mainClass = 'io.smartin.id1212.App'
}

test {
    useJUnitPlatform()
}

apply plugin: 'war'

task stage(dependsOn: ['war', 'clean'])
war.mustRunAfter clean

task copyToLib(type: Copy) {
    into "$buildDir/server"
    from(configurations.compileClasspath) {
        include "webapp-runner*"
    }
}

stage.dependsOn(copyToLib)
